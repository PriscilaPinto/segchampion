pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/juice-shop/juice-shop.git'
    }

    stages {
        stage('Limpar Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout do GitHub') {
            steps {
                git branch: 'master', url: env.GIT_URL
            }
        }
        
        stage('SAST com Horusec') {
            steps {
                // Executar o Horusec CLI para análise de segurança
                sh '''
                docker run --rm -v /home/pri/relatorio:/report -v /var/run/docker.sock:/var/run/docker.sock \
                    -v ${WORKSPACE}:/src/horusec \
                    horuszup/horusec-cli:v2.9.0-beta.3 horusec start -p /src/horusec -P ${WORKSPACE} -o json -O /report/output.json
                '''
                sh '/home/pri/script/horusec-script.sh'
            }
        }
        
                stage('SonarQube Analysis') {
            steps {
                script {
                    sh '''
                        docker run \
                            --rm \
                            -v $(pwd):/usr/src \
                            -e SONAR_HOST_URL="http://192.168.0.105:9000" \
                            sonarsource/sonar-scanner-cli \
                              -Dsonar.projectKey=juice \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://192.168.0.105:9000 \
                              -Dsonar.login=sqp_cb000914da4350676067f7e461d1653e13eabe1a \
                              -Dsonar.exclusions=**/*.java 
                     '''
                }
            }
        }

        stage('SCA com Dependency-Check') {
            steps {
                // Executar o script shell dependency-check-docker.sh
                 sh '/home/pri/script/dependency-check.sh &'
                 sh '/home/pri/script/dependency-script.sh &'
            }
        }

        stage('Pull e Run Docker Container do Juice-Shop') {
            steps {
                // Clonar o repositório do Juice Shop
                sh 'docker pull bkimminich/juice-shop'
                
                // Docker Run da aplicação Juice Shop
                sh 'docker run --rm -p 3000:3000 bkimminich/juice-shop &'
                
                // Executar o contêiner Docker
                //sh 'docker run --rm -p 3000:3000 juice-shop'
            }
        }
        
        stage('Verificar se o contêiner está pronto') {
            steps {
                // Aguardar até que a porta 10503 esteja acessível no contêiner
                sh 'while ! nc -z localhost 3000; do sleep 1; done'
            }
        }

        stage('Análise do Docker Image com Trivy') {
            steps {
                // Executar o Trivy para análise de vulnerabilidades na imagem bkimminich/juice-shop
                sh 'docker run --rm -v /home/pri/relatorio:/report -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image bkimminich/juice-shop  -f json -o /report/trivy_report.json'
                sh '/home/pri/script/trivy-script.sh'
                
            }
            
        }
        
        stage('DAST com OWASP ZAP') {
            steps {
                // Executar o OWASP ZAP para análise de segurança
              // sh 'docker run --rm -p 8090:8090 -v /home/pri/relatorio:/report -t zaproxy/zap-stable zap-baseline.py -t http://192.168.0.104:3000 -x /report/zap_ataque.xml'
                sh 'docker run --rm -p 8090:8090 -v /home/pri/relatorio:/report -v /home/pri/zap/wrk:/zap/wrk -t zaproxy/zap-stable zap-baseline.py -t http://192.168.0.105:3000 -x /report/zap-report.xml || true'
                sh ' /home/pri/script/zap-script.sh'
                
            }
            
        }

    }
    
    post {
        always {
            // Parar e remover o contêiner após a execução do job
            script {
                def containerId = sh(script: 'docker ps -q --filter ancestor=bkimminich/juice-shop', returnStdout: true).trim()
                if (containerId != "") {
                    sh "docker stop $containerId"
                    //sh "docker rm $containerId"
                }
            }
        }
    }
}
